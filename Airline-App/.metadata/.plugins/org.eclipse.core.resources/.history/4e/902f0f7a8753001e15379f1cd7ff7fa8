package com.airline.routes.service;

import java.io.File;
import java.io.IOException;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.airline.routes.Exception.CategoryNotFoundException;
import com.airline.routes.dto.Airline;
import com.airline.routes.dto.Airport;
import com.airline.routes.dto.GetDetailedItineraryResponse;
import com.airline.routes.model.AirlineRoute;
import com.airline.routes.repository.AirlineRouteRepo;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class AirlineRouteServiceImpl implements AirlineRouteService {

	@Autowired
	AirlineRouteRepo airlineRouteRepo;

	@Autowired
	RestTemplate airportConfig;

	@Override
	public List<AirlineRoute> getAllAirlineRoutes() {
		List<AirlineRoute> dataList = new ArrayList<>();
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			// Specify the path to your JSON file
			File jsonFile = new File("C:\\Airline-App\\flightsDB.routes_v2.json");

			// Read JSON data into a List of MyJsonObject
			dataList = objectMapper.readValue(jsonFile, new TypeReference<List<AirlineRoute>>() {
			});

			// Now you can work with the 'dataList' which contains a list of JSON objects.
			for (AirlineRoute obj : dataList) {
				airlineRouteRepo.save(obj);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return dataList;

	}

	@Override
	public List<AirlineRoute> searchAirline(String destination, String arrival, LocalDate date, String category) {
		DayOfWeek dayOfWeek = date.getDayOfWeek();
		int day = dayOfWeek.getValue();
		List<Boolean> categoryList = Arrays.asList(false, false, false);
		List<String> dayStatus = Arrays.asList("", "", "", "", "", "", "");
		dayStatus.set(day - 1, "yes");
		if (category.equalsIgnoreCase("bussiness")) {
			categoryList.set(0, true);
		} else if (category.equalsIgnoreCase("economy")) {
			categoryList.set(1, true);
		} else if (category.equalsIgnoreCase("first")) {
			categoryList.set(2, true);
		} else {
			throw new CategoryNotFoundException("Category not found");
		}
		List<AirlineRoute> routes = airportConfig.getForObject(
				"http://localhost:8200/api/airline/routes/search?arrival=" + arrival + "&destination=" + destination,
				List.class);
		List<AirlineRoute> searchedAirlineRouteList = new ArrayList<>();
		for (AirlineRoute route : routes) {
			if (route.getIataTo().equals(destination) && route.getIataFrom().equals(arrival)
					&& (route.getDay1().equals(dayStatus.get(0)) || route.getDay2().equals(dayStatus.get(1))
							|| route.getDay3().equals(dayStatus.get(2)) || route.getDay4().equals(dayStatus.get(3))
							|| route.getDay5().equals(dayStatus.get(4)) || route.getDay6().equals(dayStatus.get(5))
							|| route.getDay7().equals(dayStatus.get(6)))
					&& (route.isClassBusiness() == categoryList.get(0) || route.isClassEconomy() == categoryList.get(1)
							|| route.isClassFirst() == categoryList.get(2))) {
				searchedAirlineRouteList.add(route);
			}
		}

		return searchedAirlineRouteList;
	}

	@Override
	public List<AirlineRoute> searchRouteForGivenSourceDestination(String arrival, String destination) {
		return airlineRouteRepo.searchRouteForGivenSourceDestination(arrival, destination);
	}

	@Override
	public List<GetDetailedItineraryResponse> getDetailedItinerary(List<Integer> routeId) {
		for (int id : routeId) {
			GetDetailedItineraryResponse itineraryResponse=new GetDetailedItineraryResponse();
			AirlineRoute getRoute = airlineRouteRepo.findById(id).get();
			String airlineIata = getRoute.getAirLineIata();
			String airportToIata = getRoute.getIataTo();
			String airportFromIata = getRoute.getIataFrom();
			Airline getAirline = airportConfig.getForObject("localhost:8100/api/airline/getbyiata/" + airlineIata,
					Airline.class);
			Airport getAirportTo = airportConfig.getForObject("localhost:8100/api/airport/getbyiata/" + airportToIata,
					Airport.class);
			Airport getAirportFrom = airportConfig
					.getForObject("localhost:8100/api/airport/getbyiata/" + airportFromIata, Airport.class);
			
		}

		return null;
	}

}
