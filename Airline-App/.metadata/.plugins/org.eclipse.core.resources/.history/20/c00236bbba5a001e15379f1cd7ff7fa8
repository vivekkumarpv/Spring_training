package com.airline.routes.service;

import java.io.File;
import java.io.IOException;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.airline.routes.Exception.CategoryNotFoundException;
import com.airline.routes.dto.Airline;
import com.airline.routes.dto.Airport;
import com.airline.routes.dto.GetDetailedItineraryResponse;
import com.airline.routes.dto.MultiCityRouteRequestBody;
import com.airline.routes.dto.MultiCityRouteResponse;
import com.airline.routes.dto.OneWayRoundTripRequestBody;
import com.airline.routes.dto.OneWayRoundTripResponse;
import com.airline.routes.dto.RouteInput;
import com.airline.routes.model.AirlineRoute;
import com.airline.routes.repository.AirlineRouteRepo;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class AirlineRouteServiceImpl implements AirlineRouteService {

	@Autowired
	AirlineRouteRepo airlineRouteRepo;

	@Autowired
	RestTemplate airportConfig;

	@Override
	public List<AirlineRoute> getAllAirlineRoutes() {
		List<AirlineRoute> dataList = new ArrayList<>();
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			// Specify the path to your JSON file
			File jsonFile = new File("C:\\Airline-App\\flightsDB.routes_v2.json");

			// Read JSON data into a List of MyJsonObject
			dataList = objectMapper.readValue(jsonFile, new TypeReference<List<AirlineRoute>>() {
			});

			// Now you can work with the 'dataList' which contains a list of JSON objects.
			for (AirlineRoute obj : dataList) {
				airlineRouteRepo.save(obj);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return dataList;

	}

	@Override
	public List<AirlineRoute> searchAirline(String destination, String arrival, LocalDate date, String category) {
		DayOfWeek dayOfWeek = date.getDayOfWeek();
		int day = dayOfWeek.getValue();
		List<Boolean> categoryList = Arrays.asList(false, false, false);
		List<String> dayStatus = Arrays.asList("", "", "", "", "", "", "");
		dayStatus.set(day - 1, "yes");
		if (category.equalsIgnoreCase("bussiness")) {
			categoryList.set(0, true);
		} else if (category.equalsIgnoreCase("economy")) {
			categoryList.set(1, true);
		} else if (category.equalsIgnoreCase("first")) {
			categoryList.set(2, true);
		} else {
			throw new CategoryNotFoundException("Category not found");
		}
		List<AirlineRoute> routes = airlineRouteRepo.searchRouteForGivenSourceDestination(arrival, destination);
		List<AirlineRoute> searchedAirlineRouteList = new ArrayList<>();
		for (AirlineRoute route : routes) {
			if (route.getIataTo().equals(destination) && route.getIataFrom().equals(arrival)
					&& (route.getDay1().equals(dayStatus.get(0)) || route.getDay2().equals(dayStatus.get(1))
							|| route.getDay3().equals(dayStatus.get(2)) || route.getDay4().equals(dayStatus.get(3))
							|| route.getDay5().equals(dayStatus.get(4)) || route.getDay6().equals(dayStatus.get(5))
							|| route.getDay7().equals(dayStatus.get(6)))
					&& (route.isClassBusiness() == categoryList.get(0) || route.isClassEconomy() == categoryList.get(1)
							|| route.isClassFirst() == categoryList.get(2))) {
				searchedAirlineRouteList.add(route);
			}
		}

		return searchedAirlineRouteList;
	}

	@Override
	public List<AirlineRoute> searchRouteForGivenSourceDestination(String arrival, String destination) {
		return airlineRouteRepo.searchRouteForGivenSourceDestination(arrival, destination);
	}

	@Override
	public List<GetDetailedItineraryResponse> getDetailedItinerary(List<Integer> routeId) {
		List<GetDetailedItineraryResponse> itineraryList = new ArrayList<>();
		for (int id : routeId) {

			AirlineRoute getRoute = airlineRouteRepo.findById(id).get();
			String airlineIata = getRoute.getAirLineIata();
			String airportToIata = getRoute.getIataTo();
			String airportFromIata = getRoute.getIataFrom();
			Airline getAirline = airportConfig
					.getForObject("http://localhost:8100/api/airline/getbyiata/" + airlineIata, Airline.class);
			Airport getAirportTo = airportConfig
					.getForObject("http://localhost:8100/api/airport/getbyiata/" + airportToIata, Airport.class);
			Airport getAirportFrom = airportConfig
					.getForObject("http://localhost:8100/api/airport/getbyiata/" + airportFromIata, Airport.class);
			GetDetailedItineraryResponse itineraryResponse = new GetDetailedItineraryResponse(id, getAirportFrom,
					getAirportTo, getAirline);
			itineraryList.add(itineraryResponse);
		}

		return itineraryList;
	}

	@Override
	public List<MultiCityRouteResponse> getMultiCityRouteSearch(MultiCityRouteRequestBody multiCityReqBody) {
		List<MultiCityRouteResponse> multiCityResponseList = new ArrayList<>();
		for (RouteInput route : multiCityReqBody.getRoutesList()) {
			String destination = route.getDestination();
			String arrival = route.getArrival();
			List<String> airlines = multiCityReqBody.getAirlineList();
			LocalDate date = route.getDate();
			List<Boolean> categoryList = Arrays.asList(false, false, false);
			List<AirlineRoute> resultRoute = airlineRouteRepo.searchRouteForGivenSourceDestinationAirlines(arrival,
					destination, airlines);
			int dayNumeric = date.getDayOfWeek().getValue();
			List<String> dayStatus = Arrays.asList("", "", "", "", "", "", "");
			dayStatus.set(dayNumeric - 1, "yes");
			for (String category : multiCityReqBody.getClassList()) {
				if (category.equalsIgnoreCase("bussiness")) {
					categoryList.set(0, true);
				} else if (category.equalsIgnoreCase("economy")) {
					categoryList.set(1, true);
				} else if (category.equalsIgnoreCase("first")) {
					categoryList.set(2, true);
				} else {
					throw new CategoryNotFoundException("Category not found");
				}
			}
			List<AirlineRoute> searchedMulticityAirlineRouteList = new ArrayList<>();
			for (AirlineRoute airlineRoute : resultRoute) {
				if (airlineRoute.getIataTo().equals(destination) && airlineRoute.getIataFrom().equals(arrival)
						&& (airlineRoute.getDay1().equals(dayStatus.get(0))
								|| airlineRoute.getDay2().equals(dayStatus.get(1))
								|| airlineRoute.getDay3().equals(dayStatus.get(2))
								|| airlineRoute.getDay4().equals(dayStatus.get(3))
								|| airlineRoute.getDay5().equals(dayStatus.get(4))
								|| airlineRoute.getDay6().equals(dayStatus.get(5))
								|| airlineRoute.getDay7().equals(dayStatus.get(6)))
						&& (airlineRoute.isClassBusiness() == categoryList.get(0)
								|| airlineRoute.isClassEconomy() == categoryList.get(1)
								|| airlineRoute.isClassFirst() == categoryList.get(2))) {
					searchedMulticityAirlineRouteList.add(airlineRoute);
				}
			}

			MultiCityRouteResponse multicityRespone = new MultiCityRouteResponse(date, arrival, destination,
					searchedMulticityAirlineRouteList);
			multiCityResponseList.add(multicityRespone);

		}
		return multiCityResponseList;
	}

	@Override
	public List<OneWayRoundTripResponse> getOneWayRoundTripSearch(OneWayRoundTripRequestBody oneWayRoundTripReqBody) {
		List<OneWayRoundTripResponse> responseList = new ArrayList<>();
		for (RouteInput route : oneWayRoundTripReqBody.getRoutesList()) {
			String destination = route.getDestination();
			String source = route.getArrival();
			LocalDate date = route.getDate();
			List<Boolean> categoryList = Arrays.asList(false, false, false);
			List<AirlineRoute> resultRoute = airlineRouteRepo.searchRouteForGivenSourceDestination(source, destination);
			int dayNumeric = date.getDayOfWeek().getValue();
			List<String> dayStatus = Arrays.asList("", "", "", "", "", "", "");
			dayStatus.set(dayNumeric - 1, "yes");
			for (String category : oneWayRoundTripReqBody.getClassList()) {
				if (category.equalsIgnoreCase("bussiness")) {
					categoryList.set(0, true);
				} else if (category.equalsIgnoreCase("economy")) {
					categoryList.set(1, true);
				} else if (category.equalsIgnoreCase("first")) {
					categoryList.set(2, true);
				} else {
					throw new CategoryNotFoundException("Category not found");
				}
			}

			List<AirlineRoute> searchedAirlineRouteList = new ArrayList<>();
			for (AirlineRoute airlineRoute : resultRoute) {
				if (airlineRoute.getIataTo().equals(destination) && airlineRoute.getIataFrom().equals(source)
						&& (airlineRoute.getDay1().equals(dayStatus.get(0))
								|| airlineRoute.getDay2().equals(dayStatus.get(1))
								|| airlineRoute.getDay3().equals(dayStatus.get(2))
								|| airlineRoute.getDay4().equals(dayStatus.get(3))
								|| airlineRoute.getDay5().equals(dayStatus.get(4))
								|| airlineRoute.getDay6().equals(dayStatus.get(5))
								|| airlineRoute.getDay7().equals(dayStatus.get(6)))
						&& (airlineRoute.isClassBusiness() == categoryList.get(0)
								|| airlineRoute.isClassEconomy() == categoryList.get(1)
								|| airlineRoute.isClassFirst() == categoryList.get(2))) {
					searchedAirlineRouteList.add(airlineRoute);
				}
			}

			OneWayRoundTripResponse response = new OneWayRoundTripResponse(date, source, destination,
					searchedAirlineRouteList);
			responseList.add(response);
		}
		return responseList;
	}
	
}
